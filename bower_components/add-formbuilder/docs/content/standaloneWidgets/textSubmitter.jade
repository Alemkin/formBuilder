p Text submitter can be used for submitting multiple text messages from the same text area. The textSubmitter widget must be applied manually and does not need to be inside of a form.

p Simple example using defaults:
#textSubmitterDefault

code(data-mode='html').
	 <div id="textSubmitterDefault"></div>
//- 

code(data-mode='javascript').
	 $('#textSubmitterDefault').textSubmitter();
//- 


p The width, placeholder, rows, and send instruction options may be set.
#textSubmitterOptions

code(data-mode='html').
	 <div id="textSubmitterOptions"></div>
//- 


code(data-mode='javascript').
	$('#textSubmitterOptions').textSubmitter({
		width: '400px',
		placeholder: 'Some placeholder',
		sendInstruction: 'Some sendInstruction',
		rows: 2
	});
//- 


p The <b>submit</b> event is fired when a the enter key is pressed. The event passes an object in the format <i>{text:'What the user types in', onComplete: (callback function)}</i>. The onComplete function will reset the textarea. This example has a 200ms submit setTimeout to simulate server lag time. 
#textSubmitterSubmitBox
	.title Submitted Messages
	.messages
#textSubmitterSubmit

code(data-mode='html').
	<div id="textSubmitterSubmitBox">
	<div class="title">Submitted Messages</div>
	<div class="messages"></div>
	</div>
	<div id="textSubmitterSubmit"></div>
//- 


code(data-mode='javascript').
	var messages = $('#textSubmitterSubmitBox .messages');
	$('#textSubmitterSubmit').textSubmitter({
		width: messages.outerWidth() + 15,
		rows: 1,
		placeholder: 'Type a message!',
		ignoreEmptySubmit: true,
		submit: function(ev, data){
			setTimeout(function(){
				data.text = data.text.trim();
				if(data.text) {
					messages.append('<div class="message"><span class="submitTime">['+moment().format('HH:mm:ss')+']</span><span class="submitText">"'+data.text+'"</span></div>');
					messages.scrollTop(messages[0].scrollHeight);
					data.onComplete(true);
				} else {
					data.onComplete(false);
				}
			}, 200);
		
		}
	});
//- 
