p You may also create new types if you provide all the needed base type functions.
	.example: input(type='text' data-label='Custom "SSN" type' data-type='SSN')

	.code(data-mode='html').
		<form id='fullCustomTypeForm' action='#'>
			<input type='text' data-label='Custom "SSN" type' data-type='SSN'>
		</form>
	//- 
	
	.code(data-mode='javascript').
		$.extend($.formBuilder.inputField.types,{
			'SSN': {
				setUp: function(ui) {
					var self = this,
						e = ui.element;

					//- Set the characters a user can enter
					e.inputFilter({
						pattern: /[0-9]/,
						max: 12
					});

					//- Replace the input with a formatted input
					e.on('blur keydown', function(){
						e.val(self.format(e.val()));
					});
				},
				converter: {
					toField: function(value, ui) {
						return this.format(value);
					},
					fromField: function(value, ui) {
						return this.format(value);
					}
				},
				validate: function(ui) {
					if(!this.format(ui.element.val()).match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{4}$/))
						return {
							message: 'invalid'
						};
				},

				//- This is an extra function specifically for this type
				format: function(text) {
					if(!text)
						return '';

					//- Remove non-digits
					text = text.replace(/[^0-9]/g,'');
					text = text.substring(0, 10);

					//- add correct dashes
					if(text.length <= 4)
						return text;
					else if(text.length <= 6)
						return text.substring(0,4) + '-' + text.substring(4);
					else
						return  text.substring(0,4) + '-' + text.substring(4,6) + '-' + text.substring(6);
				}
			} 
		});
		$('fullCustomTypeForm').formBuilder();
	//- 