doctype html
html
	head
		meta(charset='utf-8')
		title jquery.formBuilder.js | Documentation

		// ==================== External CSS Dependencies ==================== 
		// Any jquery-ui theme
		link(type='text/css' rel='stylesheet' href='http://code.jquery.com/ui/1.11.4/themes/redmond/jquery-ui.css')
		
		// ==================== bower CSS Dependencies ==================== 
		link(type='text/css' rel='stylesheet' href='../bower_components/normalize.css/normalize.css')
		link(type='text/css' rel='stylesheet' href='../bower_components/jquery-timepicker-jt/jquery.timepicker.css')
		link(type='text/css' rel='stylesheet' href='../bower_components/bootstrap-datepicker/dist/css/bootstrap-datepicker.standalone.css')


		// ==================== formBuilder CSS Dependencies ==================== 
		link(type='text/css' rel='stylesheet' href='../dist/css/formBuilder.css')

		// Display purposes
		link(type='text/css' rel='stylesheet' href='http://fonts.googleapis.com/css?family=Open+Sans')
		link(type='text/css' rel='stylesheet' href='./css/codemirror.css')
		link(type='text/css' rel='stylesheet' href='./css/monokai.css')
		link(type='text/css' rel='stylesheet' href='./css/docs.css')

	body
		.header
			.title jQuery.formBuilder
			.links
				a.travis(href='https://travis-ci.org/autodatadirect/formBuilder')
					img(src='https://travis-ci.org/autodatadirect/formBuilder.svg?branch=master')
				a.github(href='https://github.com/autodatadirect/formBuilder')
					img(src='./img/GitHub-Mark-Light-32px.png')
		.container
			.sideNav
				ul.navDepth-0
					li.current(name='baseForm')
						a(href='#') Base Form
						ul.navDepth-1
							li.current(name='baseForm-applyingFormBuilder'): a(href='#baseForm-applyingFormBuilder') Applying the formBuilder
							li(name='baseForm-requiredInputs'): a(href='#baseForm-requiredInputs') Required Inputs

					li(name='fieldEnhancments')
						a(href='#fieldEnhancments') Field Enhancements
						ul.navDepth-1
							li(name='fieldEnhancments-preinputPostinput'): a(href='#fieldEnhancments-preinputPostinput') Preinput/Postinput
							li(name='fieldEnhancments-prefixSuffix'): a(href='#fieldEnhancments-prefixSuffix') Prefix/Suffix
							li(name='fieldEnhancments-labels'): a(href='#fieldEnhancments-labels') Labels
							li(name='fieldEnhancments-placeholderText'): a(href='#fieldEnhancments-placeholderText') Placeholder Text
							li(name='fieldEnhancments-max'): a(href='#fieldEnhancments-max') Max
							li(name='fieldEnhancments-inputGroups'): a(href='#fieldEnhancments-inputGroups') Input Groups
							li(name='fieldEnhancments-tooltip'): a(href='#fieldEnhancments-tooltip') Tooltip
					
					li(name='dataTypes')
						a(href='#dataTypes') Data Types
						ul.navDepth-1
							li(name='dataTypes-inputTypes'): a(href='#dataTypes-inputTypes') Input Types
							li(name='dataTypes-codes'): a(href='#dataTypes-codes') Codes
							li(name='dataTypes-select'): a(href='#dataTypes-select') Select
							li(name='dataTypes-textarea'): a(href='#dataTypes-textarea') Textarea
							li(name='dataTypes-arrayField'): a(href='#dataTypes-arrayField') Array Field
							li(name='dataTypes-textSubmitter'): a(href='#dataTypes-textSubmitter') Text Submitter
					
					li(name='customization')
						a(href='#customization') Customization
						ul.navDepth-1
							li(name='customization-regexTypes'): a(href='#customization-regexTypes') Creating Simple Regex Types
							li(name='customization-fullTypes'): a(href='#customization-fullTypes') Creating Full Custom Types
					
					li(name='unsupported')
						a(href='#unsupported') Unsupported
						ul.navDepth-1
							li(name='unsupported-checkbox'): a(href='#unsupported-checkbox') Checkboxes
							li(name='unsupported-radio'): a(href='#unsupported-radio') Radio Buttons

					li(name='demo')
						a(href='#demo') Live Demo
						ul.navDepth-1
							li(name='demo-form'): a(href='#demo-form') Form
							li(name='demo-results'): a(href='#demo-results') Results
							li(name='demo-source'): a(href='#demo-source') Source
					
					
					//- TEMPORARY FOR TESTING PURPOSES
					li(name='newTypes')
						a(href='#newTypes') New Types

			.content
				h1
					a.anchor(name='baseForm' href='#baseForm')
					| Base Form 

				h2
					a.anchor(name='baseForm-applyingFormBuilder' href='#baseForm-applyingFormBuilder')
					| Applying the formBuilder

				p To initialize a form with formBuilder
					.code(data-mode='javascript').
						 $('form').formBuilder();
					//- 

				p To keep the form hidden until it is constructed or if it is unsupported, style the form with
					.code(data-mode='html').
						<form style="display:none;">
							....
						</form>
					//- 

				p Only elements inside of the formBuilder are effected

				h2
					a.anchor(name='baseForm-requiredInputs' href='#baseForm-requiredInputs')
					| Required Inputs

				p The <i>data-required</i> attribute if set on an input element will prevent form submission if it is not valid
					.example: form(id='fb' action='#' style='display:none;')
						input(type='text' data-label='Not Required')
						input(type='text' data-label='Required' data-require='true')
						button(type='submit') Submit Test
					.code(data-mode='html').
						<form action='#' style='display:none;'>
							<input type="text" data-label="Not Required">
							<input type="text" data-label="Required" data-require="true">
						</form>
					//-

				p The <i>data-default-required</i> attribute <b>applied to the form</b> element will set the default data-required state of all nested inputs
					.example: form(id='fb' action='#' style='display:none;' data-default-required="true")
						input(type='text' data-label='Required' data-require='true')
						input(type='text' data-label='Still Required')
						button(type='submit') Submit Test
				p In order to set the default data-require state for all nested input the attibute 'data-default-required' must be set to true in the parent attribute
					.code(data-mode='html').
						<form action="#" style="display:none;" data-default-required="true">
							<input type="text" data-label="Required" data-require="true">
							<input type="text" data-label="Still Required">
						</form>
					//- 





				h1
					a.anchor(name='fieldEnhancments' href='#fieldEnhancments')
					| Field Enhancements
				h2
					a.anchor(name='fieldEnhancments-preinputPostinput' href='#fieldEnhancments-preinputPostinput')
					| Preinput/Postinput

				p The <i>data-preinput</i> attribute adds a block of text before any input
					.example: input(type='text' data-preinput='pre')
				p The <i>data-postinput</i> attribute adds a block of text after any input
					.example: input(type='text' data-postinput='post')
				p Both can be used at the same time
					.example: input(type='text' data-preinput='pre' data-postinput='post')
					.code(data-mode='html').
						<input type="text" data-preinput="pre">
						<input type="text" data-postinput="post">
						<input type="text" data-preinput="pre" data-postinput="post">
					//- 

				h2
					a.anchor(name='fieldEnhancments-prefixSuffix' href='#fieldEnhancments-prefixSuffix')
					| Prefix/Suffix

				p Will add text at front/end of form field that can only be visible once the user has begun entering text into the field
				p The <i>data-prefix</i>
					.example: input(type='text' data-prefix='prefix')
				p The <i>data-suffix</i>
					.example: input(type='text' data-suffix='suffix')
					.code(data-mode='html').
						<input type="text" data-prefix="prefix">
						<input type="text" data-suffix="suffix">
					//- 

				h2
					a.anchor(name='fieldEnhancments-labels' href='#fieldEnhancments-labels')
					| Labels

				p The <i>data-label</i> attribute adds text above any input field
					.example: input(type='text' data-label='Some Label Text')
					.code(data-mode='html').
						 <input type="text" data-label="Some Label Text">
					//- 

				h2
					a.anchor(name='fieldEnhancments-placeholderText' href='#fieldEnhancments-placeholderText')
					| Placeholder Text

				p The <i>data-empty</i> or <i>data-placeholder</i> attribute will display placeholder text when an input field is empty
					.example: input(type='text' data-empty='some text (empty)')
					.example: input(type='text' data-placeholder='some text (placeholder)')
					.code(data-mode='html').
						<input type="text" data-empty="some text (empty)">
						<input type="text" data-placeholder="some text (placeholder)">
					//- 

				h2
					a.anchor(name='fieldEnhancments-max' href='#fieldEnhancments-max')
					| Max

				p the <i>data-max</i> attribute adds a maximum character requirement, enforced while typed
					.example: input(type='text' data-label='Maxmum of 10 chars' data-max='10')
					.code(data-mode='html').
						<input type="text" data-label="Maxmum of 10 chars" data-max="10">
					//- 
				
				h2
					a.anchor(name='fieldEnhancments-inputGroups' href='#fieldEnhancments-inputGroups')
					| Input Groups

				p Use input groups to keep inputs inline
					.example: .input-field-group
						input(type='text' data-label='input 1')
						input(type='text' data-label='input 2')
						input(type='text' data-label='input 3 w/ pre' data-preinput='pre')
						p This is done by simply coding each desired input directly after the one before it
					.code(data-mode='html').
						<div class='input-field-group'>
							<input type="text" data-label="input 1">
							<input type="text" data-label="input 2">
							<input type="text" data-label="input 3 w/ pre" data-preinput="pre">
						</div>
					//- 

				h2
					a.anchor(name='fieldEnhancments-tooltip' href='#fieldEnhancments-tooltip')
					| Tooltip

				p You can add a tooltip box <b>after a form field</b> that will display a hovering widget on-click. You need a div of class <i>tooltip</i> with an optional <i>title</i> attribute
					.example
						input(type='text')
						.tooltip(title='Tooltip Example')
							h1 This is a tooltip
							p Paragraph One
							p Paragraph Two
							a(href='http://add123.com') Some link somewhere cool
					.example
						input(type='text')
						.tooltip
							h1 This is a tooltip without a title
							p Paragraph One
							p Paragraph Two
							a(href='http://add123.com') Some link somewhere cool
					.code(data-mode='html').
						<input type="text">
						<div title="Tooltip Title" class="tooltip">
							<h1>Tooltip Header</h1>
							<p>Paragraph One</p>
							<p>Paragraph Two</p><a href="http://add123.com">Link</a>
						</div>
					//- 




				h1
					a.anchor(name='dataTypes' href='#dataTypes')
					| Data Types

				h2
					a.anchor(name='dataTypes-inputTypes' href='#dataTypes-inputTypes')
					| Input Types

				p The <i>data-type</i> attribute can be specifed to add content checking
					.example
						input(type='text' data-label='no data-type')
						span No specified data type, will not throw errors for any input. 
					.example
						input(type='text' data-label='tmsFullname' data-type='tmsFullname')
						span Extension of <b>utext</b>. Requires two names separated by a space
					.example
						input(type='text' data-label='utext' data-type='utext')
						span For uppercase text. If a user types in lowercase text, it is automatically converted to uppercase.
					.example
						input(type='text' data-label='integer' data-type='integer')
						span For digits [0-9].
					.example
						input(type='text' data-label='number' data-type='number')
						span For integers or decimal numbers [[0-9].]. 
					.example
						input(type='text' data-label='state' data-type='state')
						span For state abbreviations [A-Z].
					.example
						input(type='text' data-label='zip' data-type='zip')
						span For entering 5 digit or 9 digit (with or without '-') zip codes.
					.example
						input(type='text' data-label='email' data-type='email')
						span For email inputs. The correct format is a username, then a single '@', then an alphanumeric domain name, then a single '.', then a alphabetic domain extension 2-4 characters in length. 
					.example
						input(type='text' data-label='money: default' data-type='money')
						span For currency inputs. Similar to the number field, but will automatically round to 2 decimal places on blur.
					.example
						input(type='text' data-label='money: custom currency symbol' data-type='money' data-currency-symbol ='&pound;')
						input(type='text' data-type='money' data-show-symbol='false')
						span In addition, a box with a '$' (by default) is prepended to the left of the field with a weight of -100. To change the currency symbol, set it with the <b>data-currency-symbol</b> attribute. To not show any currency symbol, set the <b>data-show-symbol</b> attribute to false.
					.example
						input(type='text' data-label='money: max and min attributes' data-type='money' data-max-amount="10.00")
						input(type='text' data-type='money' data-min-amount="10.00")
						input(type='text' data-type='money' data-min-amount="10.00" data-max-amount='100.00')
						span Max and min amounts for money can be set using the <b>data-max-amount</b> and/or the <b>data-min-amount</b>. An error message will be displayed if too large or too small an amount is entered.
					.example
						input(type='text' data-label='phone' data-type='phone')
						span For entering US phone numbers.
					.example
						input(type='text' data-label='tmsPhone' data-type='tmsPhone')
						span Extension of <b>phone</b>. Allows user to choose phone type
					.example
						input(type='text' data-label='date' data-type='date')
						span For entering dates in the 'MM/DD/YYYY' format. A user may manually type the date or click the calendar icon to reveal a jquery ui popup calendar. This icon is inside appended to the right of the field with a weight of 0. 
					.example
						input(type='text' data-label='dateTime' data-type='dateTime')
						span For entering dates and times in the 'MM/DD/YYYY h:MM AM/PM format. Works the same way as date, but also checks for a valid time. The calendar picker will set the time to noon.
					.example
						input(type='text' data-label='dateTime' data-type='dateTime' data-military='true')
						span For entering military times, performs in the same way as dateTime except time is 24 hours and does not include AM/PM
					.example
						input(type='text' data-label='display' data-type='display' value='Some value')
						p 
							span For displaying uneditable values. Displays value attribute where the input field would be. Displayed as html. 
					.example
						input(type='text' data-label='tmsQuantityUnit' data-type='tmsQuantityUnit')
						span Autocomplete for common units. Any text can be entered, it just suggests some.
				

				h2
					a.anchor(name='dataTypes-codes' href='#dataTypes-codes')
					| Codes

				p The user must type a code in that matches the a value of an object in a defined <i>codeArray</i>. 
					br 
					| Element attributes <i>data-type='code' data-codes='[yourCodeArrayVariableName]'</i>
					br 
					| In JS, <b>before the formBuilder is initialized</b>
					.example: input(type='text' data-label='code initialized w/ js' data-type='code' data-codes='testCodes')
					//- .example: input(type='text' data-label='code initialized w/ inline JSON' data-type='code' data-codes='[\
						{"value":"what the user types", "label":"what the user sees in the dropdown"},\
						{"value":"100",  "label":"Some label"},\
						{"value":"AAA",  "label":"123 Some St."},\
						{"value":"BBB",  "label":"Some Business Name Inc."},\
						{"value":"Hodor",  "label":"Bran"}\
						]')
					.code(data-mode='javascript').
						var yourCodeArrayVariableName = [
							{"value":"what the user types 1", "label":"what the user sees 1"},
							{"value":"what the user types 2", "label":"what the user sees 2"},
															...
							{"value":"what the user types n-1", "label":"what the user sees n-1"},
							{"value":"what the user types n", "label":"what the user sees n"}
						];
					//- 
				
				h2
					a.anchor(name='dataTypes-select' href='#dataTypes-select')
					| Select
				p Normal select tags will still work, but you can also use the formBuilder select input, which works in the same way as the code data-type.
					.example: select(data-label='select default without formBuilder')
						option(value='true') Yes
						option(value='false') No
						option(value='1') option 1
						option(value='2') option 2
						option(value='3') option 3
						option(value='4') option 4
						option(value='5') option 5
						option(value='6') option 6
						option(value='7') option 7
						option(value='100') Some label
						option(value='AAA') 123 Some St.
						option(value='BBB') Some Business Name Inc.
						option(value='Hodor') Bran
				
					.example
						input(type='text' data-label='formBuilder select' data-type='select' data-options='[\
							{"value":"submitted to form", "label":"Searched Item", "showClass":"aClass"},\
							{"value":"true", "label":"Yes"},\
							{"value":"false", "label":"No"},\
							{"value":"5", "label":"option 1"},\
							{"value":"2", "label":"option 2"},\
							{"value":"3", "label":"option 3"},\
							{"value":"4", "label":"option 4"},\
							{"value":"5", "label":"option 5"},\
							{"value":"100",  "label":"Some label"},\
							{"value":"AAA",  "label":"123 Some St."},\
							{"value":"BBB",  "label":"Some Business Name Inc."},\
							{"value":"Hodor",  "label":"Bran"}\
						]')
						.aClass
					p The value is what is submitted to the form while the label is what the user can search for. <b>Note:</b> In this example the single quotes should be escaped double quotes.
						.code(data-mode='html').
							<input type='text' data-label='formBuilder select' data-type='select' data-options='[
									{"value":"submitted to form", "label":"Searched Item"},
									{"value":"true", "label":"Yes"},
									{"value":"false", "label":"No"},
									{"value":"1", "label":"option 1"},
									{"value":"2", "label":"option 2"},
									{"value":"3", "label":"option 3"},
									{"value":"4", "label":"option 4"},
									{"value":"5", "label":"option 5"},
									{"value":"100",  "label":"Some label"},
									{"value":"AAA",  "label":"123 Some St."},
									{"value":"BBB",  "label":"Some Business Name Inc."},
									{"value":"Hodor",  "label":"Bran"}
								]'>
						//- 
				
				p The options in the select may be set with a function
				.example
					input#settableSelect(type='text' data-type='select')
					span Click on the button to cycle the select options.
						button(type='button' name='toggleSelect') Change Options

				h3 Other Select-Based Types
				.example
					input(type='text' data-label='tmsExpYear' data-type='tmsExpYear')
					span Created with <b>arraySelectCreator(arrayOfOptions)</b>. A select created with an array of options where label == value. This type uses the next 10 years.
				.example
					input(type='text' data-label='tmsYesNo' data-type='tmsYesNo')
					span Created with <b>booleanSelectCreator(trueLabel,falseLabel)</b>. A select created with two options where the trueLabel's value is true and the falseLabel's value is false. Can be used for localization support. With this type, 'Yes' is true and 'No' is false.
					mark Add the localization support back to the type

				h2
					a.anchor(name='dataTypes-textarea' href='#dataTypes-textarea')
					| Textarea

				p No extra attributes are required. Note, pre/post-inputs will not grow with the area.
					.example: textarea(rows='3' data-label='TextArea')

				h2
					a.anchor(name='dataTypes-arrayField' href='#dataTypes-arrayField')
					| Array Field

				p You can use array fields in a formBuilder form to allow variable amounts of the same input-field-group to be submitted.
					ul
						li Items can be added to the array with the bottom '+' addon.
						li Items can be reordered with the left '::' addon.
						li Items can be removed from the arrray with the right addon icon.
						li The main div must have a name attribute

				p This is a basic example of an arrayField of an input-field-group containing a utext input.
				.example
					div(name='arrayFieldExampleSimple' data-load-widget-as-field='arrayField')
						input(type='text' data-type='utext' data-placeholder='a utext input')
				.code(data-mode='html').
					<div name="arrayFieldExampleSimple" data-load-widget-as-field="arrayField">
						<input type="text" data-type="utext" data-placeholder="a utext input">
					</div>
				//- 

				p By adding more inputs to the arrayField div, you add more inputs to the input-field-group. (this might not actually work)
				.example
					div(name='arrayFieldExampleMultiple' data-load-widget-as-field='arrayField')
						input(type='text' data-type='utext' data-placeholder='a utext input')
						input(type='text' data-type='date')


				p You can add a message next to the add button using the <b>data-addmessage</b> attribute.
				.example
					div(name='arrayFieldExampleMessage' data-load-widget-as-field='arrayField' data-addmessage='Some added message')
						input(type='text' data-type='utext')
				.code(data-mode='html').
					<div name="arrayFieldExampleMessage" data-load-widget-as-field="arrayField" data-addmessage="Some added message">
						<input type="text" data-type="utext">
					</div>
				//- 

				p ArrayFields can have labels like other fields
				.example
					div(name='arrayFieldExampleLabel' data-load-widget-as-field='arrayField' data-label='Some label')
						input(name='someInput', type='text' data-type='utext')
				.code(data-mode='html').
					<div name="arrayFieldExampleMessage" data-load-widget-as-field="arrayField" data-label="Some label">
						<input type="text" data-type="utext">
					</div>
				//- 

				h2
					a.anchor(name='dataTypes-textSubmitter' href='#dataTypes-textSubmitter')
					| Text Submitter

				p Text submitter can be used for submitting multiple text messages from the same text area. The textSubmitter widget must be applied manually and does not need to be inside of a form.

				p Simple example using defaults:
				#textSubmitterDefault

				p The width, placeholder, rows, and send instruction options may be set.
				#textSubmitterOptions

				p The <b>submit</b> event is fired when a the enter key is pressed. The event passes an object in the format <i>{text:'What the user types in', onComplete: (callback function)}</i>. The onComplete function will reset the textarea. This example has a 200ms submit setTimeout to simulate server lag time. 
				#textSubmitterSubmitBox
					.title Submitted Messages
					.messages
				#textSubmitterSubmit








				h1
					a.anchor(name='customization' href='#customization')
					| Customization
				h2
					a.anchor(name='customization-regexTypes' href='#customization-regexTypes')
					| Creating Simple Regex Types

				p You can add your own input types using just regex very easily.
					.example: input(type='text' data-label='Custom "swear" type' data-type='swear')
					.example: input(type='text' data-label='Custom "theLetterF" type' data-type='theLetterF')
					.example: input(type='text' data-label='Custom "luckySeven" type' data-type='luckySeven')
					.code(data-mode='html').
						<form id='simpleCustomTypeForm' action='#'>
							<input type='text' data-label='Custom "swear" type' data-type='swear'>
							<input type='text' data-label='Custom "theLetterF" type' data-type='theLetterF'>
							<input type='text' data-label='Custom "luckySeven" type' data-type='luckySeven'>
						</form>
					//- 
					.code(data-mode='javascript').
						$.extend($.formBuilder.inputField.types,{
							'swear': $.formBuilder.inputField.createRegexType(/^[\!@#\$%\&*]*$/, /[\!@#\$%\&*]/),
							'theLetterF': $.formBuilder.inputField.createRegexType(/^[fF]*$/, /[fF]/,{
									toUpper: false
								}),
							'luckySeven': $.formBuilder.inputField.createRegexType(/^[7]*$/, /[7]/,{},3)
						});
						$('simpleCustomTypeForm').formBuilder();
					//- 
				
				h2
					a.anchor(name='customization-fullTypes' href='#customization-fullTypes')
					| Creating Full Custom Types

				p You may also create new types if you provide all the needed base type functions.
					.example: input(type='text' data-label='Custom "SSN" type' data-type='SSN')

					.code(data-mode='html').
						<form id='fullCustomTypeForm' action='#'>
							<input type='text' data-label='Custom "SSN" type' data-type='SSN'>
						</form>
					//- 
					
					.code(data-mode='javascript').
						$.extend($.formBuilder.inputField.types,{
							'SSN': {
								setUp: function(ui) {
									var self = this,
										e = ui.element;

									//- Set the characters a user can enter
									e.inputFilter({
										pattern: /[0-9]/,
										max: 12
									});

									//- Replace the input with a formatted input
									e.on('blur keydown', function(){
										e.val(self.format(e.val()));
									});
								},
								converter: {
									toField: function(value, ui) {
										return this.format(value);
									},
									fromField: function(value, ui) {
										return this.format(value);
									}
								},
								validate: function(ui) {
									if(!this.format(ui.element.val()).match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{4}$/))
										return {
											message: 'invalid'
										};
								},

								//- This is an extra function specifically for this type
								format: function(text) {
									if(!text)
										return '';

									//- Remove non-digits
									text = text.replace(/[^0-9]/g,'');
									text = text.substring(0, 10);

									//- add correct dashes
									if(text.length <= 4)
										return text;
									else if(text.length <= 6)
										return text.substring(0,4) + '-' + text.substring(4);
									else
										return  text.substring(0,4) + '-' + text.substring(4,6) + '-' + text.substring(6);
								}
							} 
						});
						$('fullCustomTypeForm').formBuilder();
					//- 







				h1
					a.anchor(name='unsupported' href='#unsupported')
					| Unsupported
				h2
					a.anchor(name='unsupported-checkbox' href='#unsupported-checkbox')
					| Checkboxes
				.example: input(type='checkbox' data-label='Checkbox Test 3')

				h2
					a.anchor(name='unsupported-radio' href='#unsupported-radio')
					| Radio Buttons
				.example: input(type='radio' data-label='Radio Test 3')






				h1
					a.anchor(name='demo' href='#demo')
					| Live Demo
				h2
					a.anchor(name='demo-form' href='#demo-form')
					| Form
				p To get a feel of how formBuilder is used, try out this simple demo.
				form#example(action="#" style="display: none")
					input(type="text" name="name" data-label="Name*" data-require='true')
					input(type="text" name="phoneNumber" data-type="phone" data-label="Phone Number")
					input(type="text" name="email" data-type="email" data-label="Email*" data-require='true')
					input(type="text" name="bestColor" data-type="select" data-label="Which is the best color?" data-default="#0000FF" data-options='[\
							{"value":"#FF0000", "label":"red"},\
							{"value":"#0000FF", "label":"blue"},\
							{"value":"#00FF00", "label":"green"},\
							{"value":"#FF9900", "label":"orange"},\
							{"value":"#FFFF00", "label":"yellow"},\
							{"value":"#000000", "label":"black"},\
							{"value":"#FFFFFF", "label":"white"},\
							{"value":"#CC66CC", "label":"purple"},\
							{"value":"#808080", "label":"gray"}\
						]')
					button(type='submit') Save
				
				h2
					a.anchor(name='demo-results' href='#demo-results')
					| Results
				p
					i Events
					textarea#example-events.resultDisplay(readonly)
					
					i Data
					textarea#example-data.resultDisplay(readonly)

					
				h2
					a.anchor(name='demo-source' href='#demo-source')
					| Source
				p
					.code(data-mode='html').
						<form id="example" action="#" style="display: none">
							<input type="text" name="name" data-label="Name*" data-require="true">
							<input type="text" name="phoneNumber" data-type="phone" data-label="Phone Number")>
							<input type="text" name="email" data-type="email" data-label="Email*" data-require="true">
							<input type="text" name="bestColor" data-type="select" data-label="Which is the best color?" data-default="#0000FF" data-options='[
									{"value":"#FF0000", "label":"red"},
									{"value":"#0000FF", "label":"blue"},
									{"value":"#00FF00", "label":"green"},
									{"value":"#FF9900", "label":"orange"},
									{"value":"#FFFF00", "label":"yellow"},
									{"value":"#000000", "label":"black"},
									{"value":"#FFFFFF", "label":"white"},
									{"value":"#CC66CC", "label":"purple"},
									{"value":"#808080", "label":"gray"}
								]'>
							<button type="submit">Save</button>
						</form>
					//- 

					.code(data-title="JAVASCRIPT (without result logging)" data-mode='javascript').
						var formExample = $('form#example:first').formBuilder({
							beforeset: function(ev) {

							},
							afterset: function(ev) {

							}
						});

						var saveForm = function(data, finish) {
							// Save data to server
							$.ajax({
								url: 'someserver.com',
								type: 'POST',
								data: data,
								success: function(result) {
									//handle your server result
									finish();
								},
								error: function() {
									//connection error
									finish();
								}
							});
						};

						formExample.find('button[type="submit"]').submitButton({
							color: '#FF0000',
							beforesubmit: function(ev) {
								// Runs any presubmission stuff
							},
							
							submit: function(ev, finish) {								
								// Run validation
								if(!formExample.formBuilder('validate')) {
									// The form is invalid somewhere
									finish();
									return;
								}

								saveForm(formExample.formBuilder('get'), finish);
							},
							
							aftersubmit: function(ev) {
								// Run any post-submission stuff
							}
						});
					//- 

					.code(data-title="JAVASCRIPT (with result logging)" data-mode='javascript' data-hidden='true').
						var events = $('#example-events');
						var data = $('#example-data');
						var eventNum = 1;
						var logEvent = function(str) {
							events.val(events.val()+'\n['+(eventNum++)+']  '+str);
							events.scrollTop(events[0].scrollHeight);
						};

						events.val('[0]  Start');

						var formExample = $('form#example:first').formBuilder({
							beforeset: function(ev) {
								logEvent('beforeset called on formBuilder');
							},
							afterset: function(ev) {
								logEvent('afterset called on formBuilder');
							}
						});

						logEvent('Initialized');

						var saveForm = function(data, finish) {
							// Save data to server (setTimeout is just used in the example to simulate the lag time, use $.ajax instead)
							setTimeout(function(){
								// If the server-side save was good, set it back to clean
								logEvent('server save complete');
								finish()
							}, 2000);
							
							/* Example server call
							$.ajax({
								url: 'someserver.com',
								type: 'POST',
								data: data,
								success: function(result) {
									//handle your server result
									finish();
								},
								error: function() {
									//connection error
									finish();
								}
							});
							*/
						};

						formExample.find('button[type="submit"]').submitButton({
							color: '#FF0000',
							beforesubmit: function(ev) {
								// Runs any presubmission stuff
								logEvent('beforesubmit called');
								data.val('');
							},
							
							submit: function(ev, finish) {
								logEvent('submit called');
								

								// Run validation
								if(!formExample.formBuilder('validate')) {
									// The form is invalid somewhere
									logEvent('has invalid');
									finish();
									return;
								}

								logEvent('all valid');

								var currData = formExample.formBuilder('get');
								data.val(JSON.stringify(currData,null,2));

								saveForm(currData, finish);
							},
							
							aftersubmit: function(ev) {
								// Run any post-submission stuff
								logEvent('aftersubmit called');
							}
						});
					//- 




				h1
					a.anchor(name='newTypes' href='#newTypes')
					| New Types

	
				.example
					.dateRange
				.example
					.dateTimeRange
				
				.example
					input(style='width: 300px;'  data-preinput="dasd" data-postinput="asd" data-placeholder="no dropdown")
					input(class='dropDownPanelTarget' style='width: 300px;'  data-preinput="dasd" data-postinput="asd" data-placeholder="default dropdown on input")
					input(class='dropDownPanelTarget2' style='width: 300px;'  data-preinput="dasd" data-postinput="asd" data-placeholder="default dropdown on input, targetInput=false")
				
				span.dropDownPanelTarget3 This is just a span with a default dropdown (styled for demo)


				.dropDownPanelExample
					p.
						This is a generic dropdown. It can be used to add supporting information to an 
						input type by adding a nested formBuilder form and using its results to display 
						the target's value in a certain format. For example, you could use it for location 
						information. (Note: this example does not use the form, it is only visual)
					
					form
						input(data-label='Location Name')
						input(data-label='Address')
						input(data-label='City')
						input(data-label='Country')


		//- JavaScript
		// Bower JS Dependencies (using CDNs for demo)
		script(type='text/javascript' src='../bower_components/jquery/dist/jquery.min.js')
		script(type='text/javascript' src='../bower_components/jquery-ui/ui/minified/jquery-ui.min.js')
		script(type='text/javascript' src='../bower_components/moment/min/moment.min.js')
		script(type='text/javascript' src='../bower_components/spinjs/spin.min.js')
		script(type='text/javascript' src='../bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js')
		script(type='text/javascript' src='../bower_components/jquery-timepicker-jt/jquery.timepicker.min.js')

		// formBuilder Dependencies
		script(type='text/javascript' src='../dist/jquery.formBuilder.min.js')

		// Extra for displaying
		script(type='text/javascript' src='./js/codemirror.js')
		script(type='text/javascript' src='./js/codemirror-compressed.js')
		script(type='text/javascript' src='./js/docs.js')

