doctype html
html
	head
		title jquery.formBuilder.js | Demo 2

		// ==================== External CSS Dependencies ==================== 
		// Any jquery-ui theme
		link(type='text/css' rel='stylesheet' href='http://code.jquery.com/ui/1.11.4/themes/redmond/jquery-ui.css')
		
		// ==================== bower CSS Dependencies ==================== 
		link(type='text/css' rel='stylesheet' href='../bower_components/normalize.css/normalize.css')
		link(type='text/css' rel='stylesheet' href='../bower_components/jquery-timepicker-jt/jquery.timepicker.css')
		link(type='text/css' rel='stylesheet' href='../bower_components/bootstrap-datepicker/dist/css/bootstrap-datepicker.standalone.css')


		// ==================== formBuilder CSS Dependencies ==================== 
		link(type='text/css' rel='stylesheet' href='../dist/css/formBuilder.css')

		// Display purposes
		link(type='text/css' rel='stylesheet' href='http://fonts.googleapis.com/css?family=Open+Sans')
		link(type='text/css' rel='stylesheet' href='./css/codemirror.css')
		link(type='text/css' rel='stylesheet' href='./css/monokai.css')
		
	
		style(type='text/css').
			html, body {
				font-family: 'Open Sans';
				background-color: #CEECF5;
				height: 100%;
			}
			.container {
				width: 800px;
				margin-left: auto;
				margin-right: auto;
				padding: 2em;
				background-color: #FFFFFF;
				height: auto;
				min-height: 100%;
			}
			.example {
				display: block;
				margin-bottom: 1em;
				margin-left: 1em;
			}
			.CodeMirror {
				height: auto;
				margin-top: .5em;
				margin-bottom: .5em;
			}
			.CodeMirror-scroll {
				height: auto;
				overflow-y: hidden;
				overflow-x: hidden;
			}
			.resultDisplay {
				width: 100%;
				min-height: 15em;
				resize: vertical;
			}

			.code {
				display: block;
				position: relative;
				width: 100%;
			}
			.codeTitle {
				display: block;
				position: absolute;
				top: 0px;
				left: 0px;
				font-style: italic;
			}
			.codeToggle {
				display: block;
				position: relative;
				margin-left: auto;
				margin-right: auto;
			}

			.sect-title {
				font-weight: bold;
				font-size: 1.3em;
				margin-bottom: .5em;
				background-color: #B2CAD1;
				padding: .2em;
				padding-left: 1em;
			}
			.sect-title:hover {
				cursor: pointer;
			}
			.sect-title.selected {
				background-color: #5D85E3;
				color: white;
			}
			.sect {
				margin-bottom: 4em;
				padding-left: 1em;
				padding-right: 1em;
			}
			h2 {
				color: #5D85E3;
				border-bottom-color: #B2CAD1;
				border-bottom-width: 2px;
				border-bottom-style: solid;
				margin-top: 1em;
			}

	body
		.container
			h1 formBuilder Demo 2
			hr
			.sect(data-title='Base Form')
				h2 Applying the formBuilder
				p To initialize a form with formBuilder
					.code(data-title="JavaScript" data-mode='javascript').
						 $('form').formBuilder();
					//- 

				p To keep the form hidden until it is constructed or if it is unsupported, style the form with
					.code(data-title="HTML" data-mode='html').
						<form style="display:none;">
							....
						</form>
					//- 

				p Only elements inside of the formBuilder are effected

				h2 Required Inputs
				p The <i>data-required</i> attribute if set on an input element will prevent form submission if it is not valid
					.example: form(id='fb' action='#' style='display:none;')
						input(type='text' data-label='Not Required')
						input(type='text' data-label='Required' data-require='true')
						button(type='submit') Submit Test
					.code(data-title="HTML" data-mode='html').
						<form action='#' style='display:none;'>
							<input type="text" data-label="Not Required">
							<input type="text" data-label="Required" data-require="true">
						</form>
					//-

				p The <i>data-default-required</i> attribute <b>applied to the form</b> element will set the default data-required state of all nested inputs
					.example: form(id='fb' action='#' style='display:none;' data-default-required="true")
						input(type='text' data-label='Required' data-require='true')
						input(type='text' data-label='Still Required')
						button(type='submit') Submit Test
				p In order to set the default data-require state for all nested input the attibute 'data-default-required' must be set to true in the parent attribute
					.code(data-title="HTML" data-mode='html').
						<form action="#" style="display:none;" data-default-required="true">
							<input type="text" data-label="Required" data-require="true">
							<input type="text" data-label="Still Required">
						</form>
					//- 

			.sect(data-title='Field Enhancements')
				
				h2 Preinput/Postinput
				p The <i>data-preinput</i> attribute adds a block of text before any input
					.example: input(type='text' data-preinput='pre')
				p The <i>data-postinput</i> attribute adds a block of text after any input
					.example: input(type='text' data-postinput='post')
				p Both can be used at the same time
					.example: input(type='text' data-preinput='pre' data-postinput='post')
					.code(data-title="HTML" data-mode='html').
						<input type="text" data-preinput="pre">
						<input type="text" data-postinput="post">
						<input type="text" data-preinput="pre" data-postinput="post">
					//- 

				h2 Prefix/Suffix
				p Will add text at front/end of form field that can only be visible once the user has begun entering text into the field
				p The <i>data-prefix</i>
					.example: input(type='text' data-prefix='prefix')
				p The <i>data-suffix</i>
					.example: input(type='text' data-suffix='suffix')
					.code(data-title="HTML" data-mode='html').
						<input type="text" data-prefix="prefix">
						<input type="text" data-suffix="suffix">
					//- 

				h2 Labels
				p The <i>data-label</i> attribute adds text above any input field
					.example: input(type='text' data-label='Some Label Text')
					.code(data-title="HTML" data-mode='html').
						 <input type="text" data-label="Some Label Text">
					//- 

				h2 Placeholder Text
				p The <i>data-empty</i> or <i>data-placeholder</i> attribute will display placeholder text when an input field is empty
					.example: input(type='text' data-empty='some text (empty)')
					.example: input(type='text' data-placeholder='some text (placeholder)')
					.code(data-title="HTML" data-mode='html').
						<input type="text" data-empty="some text (empty)">
						<input type="text" data-placeholder="some text (placeholder)">
					//- 

				h2 Max
				p the <i>data-max</i> attribute adds a maximum character requirement, enforced while typed
					.example: input(type='text' data-label='Maxmum of 10 chars' data-max='10')
					.code(data-title="HTML" data-mode='html').
						<input type="text" data-label="Maxmum of 10 chars" data-max="10">
					//- 
				
				h2 Input Groups
				p Use input groups to keep inputs inline
					.example: .input-field-group
						input(type='text' data-label='input 1')
						input(type='text' data-label='input 2')
						input(type='text' data-label='input 3 w/ pre' data-preinput='pre')
						p This is done by simply coding each desired input directly after the one before it
					.code(data-title="HTML" data-mode='html').
						<div class='input-field-group'>
							<input type="text" data-label="input 1">
							<input type="text" data-label="input 2">
							<input type="text" data-label="input 3 w/ pre" data-preinput="pre">
						</div>
					//- 

				h2 Tooltip
				p You can add a tooltip box <b>after a form field</b> that will display a hovering widget on-click. You need a div of class <i>tooltip</i> with an optional <i>title</i> attribute
					.example
						input(type='text')
						.tooltip(title='Tooltip Example')
							h1 This is a tooltip
							p Paragraph One
							p Paragraph Two
							a(href='http://add123.com') Some link somewhere cool
					.example
						input(type='text')
						.tooltip
							h1 This is a tooltip without a title
							p Paragraph One
							p Paragraph Two
							a(href='http://add123.com') Some link somewhere cool
					.code(data-title="HTML" data-mode='html').
						<input type="text">
						<div title="Tooltip Title" class="tooltip">
							<h1>Tooltip Header</h1>
							<p>Paragraph One</p>
							<p>Paragraph Two</p><a href="http://add123.com">Link</a>
						</div>
					//- 


			.sect(data-title='Data Types')

				h2 Input Types
				p The <i>data-type</i> attribute can be specifed to add content checking
					.example
						input(type='text' data-label='no data-type')
						span No specified data type, will not throw errors for any input. 
					.example
						input(type='text' data-label='utext' data-type='utext')
						span For uppercase text. If a user types in lowercase text, it is automatically converted to uppercase.
					.example
						input(type='text' data-label='integer' data-type='integer')
						span For digits [0-9].
					.example
						input(type='text' data-label='number' data-type='number')
						span For integers or decimal numbers [[0-9].]. 
					.example
						input(type='text' data-label='state' data-type='state')
						span For state abbreviations [A-Z].
					.example
						input(type='text' data-label='zip' data-type='zip')
						span For entering 5 digit or 9 digit (with or without '-') zip codes.
					.example
						input(type='text' data-label='email' data-type='email')
						span For email inputs. The correct format is a username, then a single '@', then an alphanumeric domain name, then a single '.', then a alphabetic domain extension 2-4 characters in length. 
					.example
						input(type='text' data-label='money' data-type='money')
						input(type='text' data-type='money' data-currency-symbol ='&pound;')
						span For currency inputs. Similar to the number field, but will automatically round to 2 decimal places on blur. In addition, a box with a '$' (by default) is prepended to the left of the field with a weight of -100. To change the currency symbol, set it with the <b>data-currency-symbol</b> attribute.  
					.example
						input(type='text' data-label='phone' data-type='phone')
						span For entering US phone numbers. 
					.example
						input(type='text' data-label='date' data-type='date')
						span For entering dates in the 'MM/DD/YYYY' format. A user may manually type the date or click the calendar icon to reveal a jquery ui popup calendar. This icon is inside appended to the right of the field with a weight of 0. 
					.example
						input(type='text' data-label='dateTime' data-type='dateTime')
						span For entering dates and times in the 'MM/DD/YYYY h:MM AM/PM format. Works the same way as date, but also checks for a valid time. The calendar picker will set the time to noon.
					.example
						input(type='text' data-label='dateTime' data-type='dateTime' data-hours='true')
						span For entering military times, performs in the same way as dateTime except time is 24 hours and does not include AM/PM
					.example
						input(type='text' data-label='display' data-type='display' value='Some value')
						p 
							span For displaying uneditable values. Displays value attribute where the input field would be. Displayed as html. 

				

				h2 Codes
				p The user must type a code in that matches the a value of an object in a defined <i>codeArray</i>. 
					br 
					| Element attributes <i>data-type='code' data-codes='[yourCodeArrayVariableName]'</i>
					br 
					| In JS, <b>before the formBuilder is initialized</b>
					.example: input(type='text' data-label='code initialized w/ js' data-type='code' data-codes='testCodes')
					//- .example: input(type='text' data-label='code initialized w/ inline JSON' data-type='code' data-codes='[\
						{"value":"what the user types", "label":"what the user sees in the dropdown"},\
						{"value":"100",  "label":"Some label"},\
						{"value":"AAA",  "label":"123 Some St."},\
						{"value":"BBB",  "label":"Some Business Name Inc."},\
						{"value":"Hodor",  "label":"Bran"}\
						]')
					.code(data-title="JavaScript" data-mode='javascript').
						var yourCodeArrayVariableName = [
							{"value":"what the user types 1", "label":"what the user sees 1"},
							{"value":"what the user types 2", "label":"what the user sees 2"},
															...
							{"value":"what the user types n-1", "label":"what the user sees n-1"},
							{"value":"what the user types n", "label":"what the user sees n"}
						];
					//- 
				
				h2 Select
				p Normal select tags will still work, but you can also use the formBuilder select input, which works in the same way as the code data-type.
					.example: select(data-label='select default without formBuilder')
						option(value='true') Yes
						option(value='false') No
						option(value='1') option 1
						option(value='2') option 2
						option(value='3') option 3
						option(value='4') option 4
						option(value='5') option 5
						option(value='6') option 6
						option(value='7') option 7
						option(value='100') Some label
						option(value='AAA') 123 Some St.
						option(value='BBB') Some Business Name Inc.
						option(value='Hodor') Bran
				
					.example: input(type='text' data-label='formBuilder select' data-type='select' data-options='[\
						{"value":"submitted to form", "label":"Searched Item"},\
						{"value":"true", "label":"Yes"},\
						{"value":"false", "label":"No"},\
						{"value":"5", "label":"option 1"},\
						{"value":"2", "label":"option 2"},\
						{"value":"3", "label":"option 3"},\
						{"value":"4", "label":"option 4"},\
						{"value":"5", "label":"option 5"},\
						{"value":"100",  "label":"Some label"},\
						{"value":"AAA",  "label":"123 Some St."},\
						{"value":"BBB",  "label":"Some Business Name Inc."},\
						{"value":"Hodor",  "label":"Bran"}\
						]')
					p The value is what is submitted to the form while the label is what the user can search for. <b>Note:</b> In this example the single quotes should be escaped double quotes.
						.code(data-title="HTML" data-mode='html').
							<input type='text' data-label='formBuilder select' data-type='select' data-options='[
									{"value":"submitted to form", "label":"Searched Item"},
									{"value":"true", "label":"Yes"},
									{"value":"false", "label":"No"},
									{"value":"1", "label":"option 1"},
									{"value":"2", "label":"option 2"},
									{"value":"3", "label":"option 3"},
									{"value":"4", "label":"option 4"},
									{"value":"5", "label":"option 5"},
									{"value":"100",  "label":"Some label"},
									{"value":"AAA",  "label":"123 Some St."},
									{"value":"BBB",  "label":"Some Business Name Inc."},
									{"value":"Hodor",  "label":"Bran"}
								]'>
						//- 

				h2 Textarea
				p No extra attributes are required. Note, pre/post-inputs will not grow with the area.
					.example: textarea(rows='3' data-label='TextArea')


			.sect(data-title='Customization')
				h2 Creating Simple Regex Types
				p You can add your own input types using just regex very easily.
					.example: input(type='text' data-label='Custom "swear" type' data-type='swear')
					.example: input(type='text' data-label='Custom "theLetterF" type' data-type='theLetterF')
					.example: input(type='text' data-label='Custom "luckySeven" type' data-type='luckySeven')
					.code(data-title='HTML', data-mode='html').
						<form id='simpleCustomTypeForm' action='#'>
							<input type='text' data-label='Custom "swear" type' data-type='swear'>
							<input type='text' data-label='Custom "theLetterF" type' data-type='theLetterF'>
							<input type='text' data-label='Custom "luckySeven" type' data-type='luckySeven'>
						</form>
					//- 
					.code(data-title='JavaScript' data-mode='javascript').
						$.extend($.add123.inputField.types,{
							'swear': $.add123.inputField.createRegexType(/^[\!@#\$%\&*]*$/, /[\!@#\$%\&*]/),
							'theLetterF': $.add123.inputField.createRegexType(/^[fF]*$/, /[fF]/,{
									toUpper: false
								}),
							'luckySeven': $.add123.inputField.createRegexType(/^[7]*$/, /[7]/,{},3)
						});
						$('simpleCustomTypeForm').formBuilder();
					//- 
				
				h2 Creating Full Custom Types
				p You may also create new types if you provide all the needed base type functions.
					.example: input(type='text' data-label='Custom "SSN" type' data-type='SSN')

					.code(data-title='HTML' data-mode='html').
						<form id='fullCustomTypeForm' action='#'>
							<input type='text' data-label='Custom "SSN" type' data-type='SSN'>
						</form>
					//- 
					
					.code(data-title='JavaScript' data-mode='javascript').
						$.extend($.add123.inputField.types,{
							'SSN': {
								setUp: function(ui) {
									var self = this,
										e = ui.element;

									//- Set the characters a user can enter
									e.inputFilter({
										pattern: /[0-9]/,
										max: 12
									});

									//- Replace the input with a formatted input
									e.on('blur keydown', function(){
										e.val(self.format(e.val()));
									});
								},
								converter: {
									toField: function(value, ui) {
										return this.format(value);
									},
									fromField: function(value, ui) {
										return this.format(value);
									}
								},
								validate: function(ui) {
									if(!this.format(ui.element.val()).match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{4}$/))
										return {
											message: 'invalid'
										};
								},

								//- This is an extra function specifically for this type
								format: function(text) {
									if(!text)
										return '';

									//- Remove non-digits
									text = text.replace(/[^0-9]/g,'');
									text = text.substring(0, 10);

									//- add correct dashes
									if(text.length <= 4)
										return text;
									else if(text.length <= 6)
										return text.substring(0,4) + '-' + text.substring(4);
									else
										return  text.substring(0,4) + '-' + text.substring(4,6) + '-' + text.substring(6);
								}
							} 
						});
						$('fullCustomTypeForm').formBuilder();
					//- 

			.sect(data-title='Unsupported')
				h2 Checkboxes
				.example: input(type='checkbox' data-label='Checkbox Test 3')

				h2 Radio Buttons
				.example: input(type='radio' data-label='Radio Test 3')

			.sect(data-title='Demo')
				
				h2 Form
				p To get a feel of how formBuilder is used, try out this simple demo.
				form#example(action="#" style="display: none")
					input(type="text" name="name" data-label="Name*" data-require='true')
					input(type="text" name="phoneNumber" data-type="phone" data-label="Phone Number")
					input(type="text" name="email" data-type="email" data-label="Email*" data-require='true')
					input(type="text" name="bestColor" data-type="select" data-label="Which is the best color?" data-default="#0000FF" data-options='[\
							{"value":"#FF0000", "label":"red"},\
							{"value":"#0000FF", "label":"blue"},\
							{"value":"#00FF00", "label":"green"},\
							{"value":"#FF9900", "label":"orange"},\
							{"value":"#FFFF00", "label":"yellow"},\
							{"value":"#000000", "label":"black"},\
							{"value":"#FFFFFF", "label":"white"},\
							{"value":"#CC66CC", "label":"purple"},\
							{"value":"#808080", "label":"gray"}\
						]')
					button(type='submit') Save
				
				h2 Results
				p
					i Events
					textarea#example-events.resultDisplay(readonly)
					
					i Data
					textarea#example-data.resultDisplay(readonly)

					
				h2 Source
				p
					.code(data-title="HTML" data-mode='html').
						<form id="example" action="#" style="display: none">
							<input type="text" name="name" data-label="Name*" data-require="true">
							<input type="text" name="phoneNumber" data-type="phone" data-label="Phone Number")>
							<input type="text" name="email" data-type="email" data-label="Email*" data-require="true">
							<input type="text" name="bestColor" data-type="select" data-label="Which is the best color?" data-default="#0000FF" data-options='[
									{"value":"#FF0000", "label":"red"},
									{"value":"#0000FF", "label":"blue"},
									{"value":"#00FF00", "label":"green"},
									{"value":"#FF9900", "label":"orange"},
									{"value":"#FFFF00", "label":"yellow"},
									{"value":"#000000", "label":"black"},
									{"value":"#FFFFFF", "label":"white"},
									{"value":"#CC66CC", "label":"purple"},
									{"value":"#808080", "label":"gray"}
								]'>
							<button type="submit">Save</button>
						</form>
					//- 

					.code(data-title="JavaScript (without result logging)" data-mode='javascript').
						var formExample = $('form#example:first').formBuilder({
							beforeset: function(ev) {

							},
							afterset: function(ev) {

							}
						});

						var saveForm = function(data, finish) {
							// Save data to server
							$.ajax({
								url: 'someserver.com',
								type: 'POST',
								data: data,
								success: function(result) {
									//handle your server result
									finish();
								},
								error: function() {
									//connection error
									finish();
								}
							});
						};

						formExample.find('button[type="submit"]').submitButton({
							color: '#FF0000',
							beforesubmit: function(ev) {
								// Runs any presubmission stuff
							},
							
							submit: function(ev, finish) {								
								// Run validation
								if(!formExample.formBuilder('validate')) {
									// The form is invalid somewhere
									finish();
									return;
								}

								saveForm(formExample.formBuilder('get'), finish);
							},
							
							aftersubmit: function(ev) {
								// Run any post-submission stuff
							}
						});
					//- 

					.code(data-title="JavaScript (with result logging)" data-mode='javascript' data-hidden='true').
						var events = $('#example-events');
						var data = $('#example-data');
						var eventNum = 1;
						var logEvent = function(str) {
							events.val(events.val()+'\n['+(eventNum++)+']  '+str);
							events.scrollTop(events[0].scrollHeight);
						};

						events.val('[0]  Start');

						var formExample = $('form#example:first').formBuilder({
							beforeset: function(ev) {
								logEvent('beforeset called on formBuilder');
							},
							afterset: function(ev) {
								logEvent('afterset called on formBuilder');
							}
						});

						logEvent('Initialized');

						var saveForm = function(data, finish) {
							// Save data to server (setTimeout is just used in the example to simulate the lag time, use $.ajax instead)
							setTimeout(function(){
								// If the server-side save was good, set it back to clean
								logEvent('server save complete');
								finish()
							}, 2000);
							
							/* Example server call
							$.ajax({
								url: 'someserver.com',
								type: 'POST',
								data: data,
								success: function(result) {
									//handle your server result
									finish();
								},
								error: function() {
									//connection error
									finish();
								}
							});
							*/
						};

						formExample.find('button[type="submit"]').submitButton({
							color: '#FF0000',
							beforesubmit: function(ev) {
								// Runs any presubmission stuff
								logEvent('beforesubmit called');
								data.val('');
							},
							
							submit: function(ev, finish) {
								logEvent('submit called');
								

								// Run validation
								if(!formExample.formBuilder('validate')) {
									// The form is invalid somewhere
									logEvent('has invalid');
									finish();
									return;
								}

								logEvent('all valid');

								var currData = formExample.formBuilder('get');
								data.val(JSON.stringify(currData,null,2));

								saveForm(currData, finish);
							},
							
							aftersubmit: function(ev) {
								// Run any post-submission stuff
								logEvent('aftersubmit called');
							}
						});
					//- 
			.sect(data-title='New Types')
				.example
					input(type='text' data-label='time' data-type='time')
				.example
					input(type='text' data-label='date' data-type='date')
				.example
					input(type='text' data-label='dateTime' data-type='dateTime')
				
					
		// Bower JS Dependencies (using CDNs for demo)
		// script(type='text/javascript' src='/bower_components/jquery/jquery.min.js')
		// script(type='text/javascript' src='/bower_components/jquery-ui/jquery-ui.min.js')
		// script(type='text/javascript' src='/bower_components/moment/min/moment.min.js')
		// script(type='text/javascript' src='/bower_components/spinjs/spin.min.js')
		script(type='text/javascript' src='http://code.jquery.com/jquery-1.11.3.min.js')
		script(type='text/javascript' src='http://code.jquery.com/ui/1.9.2/jquery-ui.min.js')
		script(type='text/javascript' src='http://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.3/moment.min.js')
		script(type='text/javascript' src='http://cdnjs.cloudflare.com/ajax/libs/spin.js/2.0.1/spin.min.js')
		script(type='text/javascript' src='../bower_components/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js')
		script(type='text/javascript' src='../bower_components/jquery-timepicker-jt/jquery.timepicker.min.js')

		// formBuilder Dependencies
		script(type='text/javascript' src='../dist/jquery.formBuilder.min.js')

		// Extra for displaying
		script(type='text/javascript' src='./js/codemirror.js')
		script(type='text/javascript' src='./js/codemirror-compressed.js')


		// Internal Test JS
		script.
			//- Wrap each example in a form if not already in one
			$('.example').each(function(){
				if(!$(this).parents('form').length && !$(this).parents('.code').length)
					$(this).wrap('<form id="fb" action="#" style="display:none;" data-default-required="false">');
				});

			//- Declaring test codes for data-type 'code'
			var testCodes = [ 
				{"value":"submitted to form", "label":"Searched Item"},
				{"value":"true", "label":"Yes"},
				{"value":"false", "label":"No"},
				{"value":"5", "label":"option 1"},
				{"value":"2", "label":"option 2"},
				{"value":"3", "label":"option 3"},
				{"value":"4", "label":"option 4"},
				{"value":"5", "label":"option 5"},
				{"value":"100",  "label":"Some label"},
				{"value":"AAA",  "label":"123 Some St."},
				{"value":"BBB",  "label":"Some Business Name Inc."},
				{"value":"Hodor",  "label":"Bran"}
			];

			//- Adding simple regex types
			$.extend($.add123.inputField.types,{
				'swear': $.add123.inputField.createRegexType(/^[\!@#\$%\&*]*$/, /[\!@#\$%\&*]/),
				'theLetterF': $.add123.inputField.createRegexType(/^[fF]*$/, /[fF]/,{
						toUpper: false
					}),
				'luckySeven': $.add123.inputField.createRegexType(/^[7]*$/, /[7]/,{},3)
			});

			//- Adding full custom types
			$.extend($.add123.inputField.types,{
				'SSN': {
					setUp: function(ui) {
						var self = this,
							e = ui.element;

						//- Set the characters a user can enter
						e.inputFilter({
							pattern: /[0-9]/,
							max: 12
						});

						//- Replace the input with a formatted input
						e.on('blur keydown', function(){
							e.val(self.format(e.val()));
						});
					},
					converter: {
						toField: function(value, ui) {
							return this.format(value);
						},
						fromField: function(value, ui) {
							return this.format(value);
						}
					},
					validate: function(ui) {
						if(!this.format(ui.element.val()).match(/^[0-9]{4}\-[0-9]{2}\-[0-9]{4}$/))
							return {
								message: 'invalid'
							};
					},

					//- This is an extra function specifically for this type
					format: function(text) {
						if(!text)
							return '';

						//- Remove non-digits
						text = text.replace(/[^0-9]/g,'');
						text = text.substring(0, 10);

						//- add correct dashes
						if(text.length <= 4)
							return text;
						else if(text.length <= 6)
							return text.substring(0,4) + '-' + text.substring(4);
						else
							return  text.substring(0,4) + '-' + text.substring(4,6) + '-' + text.substring(6);
					}
				} 
			});



			var f = $('form#fb').formBuilder();
			f.find('button[type="submit"]').submitButton({
				beforesubmit: function(ev) {
					console.log('before');
				},
				submit: function(ev, finish) {
					console.log('submit');

					var pForm = $(this).closest('form');

					pForm.formBuilder('validate');
					console.log('Form dirty? ' + pForm.formBuilder('isDirty'));
					console.log(pForm.formBuilder('conflicts'));
					//- console.log(f.formBuilder('get'));

					finish();
				},
				aftersubmit: function(ev) {
					console.log('after');
				}
				});

			//- Example form
			var events = $('#example-events');
			var data = $('#example-data');
			var eventNum = 1;
			var logEvent = function(str) {
				events.val(events.val()+'\n['+(eventNum++)+']  '+str);
				events.scrollTop(events[0].scrollHeight);
			};

			events.val('[0]  Start');

			var formExample = $('form#example:first').formBuilder({
				beforeset: function(ev) {
					logEvent('beforeset called on formBuilder');
				},
				afterset: function(ev) {
					logEvent('afterset called on formBuilder');
				}
			});

			logEvent('Initialized');

			var saveForm = function(data, finish) {
				// Save data to server (setTimeout is just used in the example to simulate the lag time, use $.ajax instead)
				setTimeout(function(){
					// If the server-side save was good, set it back to clean
					logEvent('server save complete');
					finish()
				}, 2000);
				
				/* Example server call
				$.ajax({
					url: 'someserver.com',
					type: 'POST',
					data: data,
					success: function(result) {
						//handle your server result
						finish();
					},
					error: function() {
						//connection error
						finish();
					}
				});
				*/
			};

			formExample.find('button[type="submit"]').submitButton({
				color: '#FF0000',
				beforesubmit: function(ev) {
					// Runs any presubmission stuff
					logEvent('beforesubmit called');
					data.val('');
				},
				
				submit: function(ev, finish) {
					logEvent('submit called');
					

					// Run validation
					if(!formExample.formBuilder('validate')) {
						// The form is invalid somewhere
						logEvent('has invalid');
						finish();
						return;
					}

					logEvent('all valid');

					var currData = formExample.formBuilder('get');
					data.val(JSON.stringify(currData,null,2));

					saveForm(currData, finish);
				},
				
				aftersubmit: function(ev) {
					// Run any post-submission stuff
					logEvent('aftersubmit called');
				}
			});


			// ================= DEMO DISPLAY CODE BELOW ===================

			//- Handle code snippets
			$('.code').each(function(){
				//- get code snippet
				var snippet =  $(this).html().substring(1);
				
				//get initial spacing char amount
				var initialSpacing = 0;
				for(var i = 0; i < snippet.length && (snippet[i].match(/[\s\t]/)); ++i)
					++initialSpacing;

				//removes initial spacing chars in line
				removeSpacing = function(lineStart) {
					var stopIndex = lineStart;
					for(var i = lineStart; i < snippet.length && (stopIndex - lineStart) < initialSpacing && snippet[i].match(/\s/); ++i)
						++stopIndex;

					//- console.log('Blocked by "' + snippet[i] + '" and cut "' + snippet.substring(lineStart, stopIndex) + '"');

					snippet = snippet.substring(0,lineStart) + snippet.substring(stopIndex);
				};

				//remove for all lines
				removeSpacing(0);
				for(var i = 0; i < snippet.length; ++i)
					if(snippet[i].match(/[\n\r]/) && (i+1) < snippet.length)
						removeSpacing(i+1);

				//- Fix special html chars
				snippet = snippet.replace(/&quot;/g, "'");
				snippet = snippet.replace(/&amp;/g, "&");

				//- Add codemirror obj
				$(this).empty(); 
				var cm = {
					value: snippet,
					mode: $(this).data('mode'),
					indentWithTabs: false,
					lineNumbers: true,
					theme: 'monokai',
					readOnly: true
				};
				if(cm.mode === 'html') {
					cm.mode = 'xml';
					cm.htmlMode = true;
				}
				var newCodeMirror = CodeMirror(this, cm);

				//- Add toggle button
				$(this).prepend('<button class="codeToggle">Toggle Source</button>');
				$(this).prepend('<div class="codeTitle">'+$(this).data('title')+'</div>');

				if($(this).data('hidden')) {
					$(this).find('.CodeMirror:first').hide();
				}
			});
			
			$('.codeToggle').click(function(ev){
				$(this).next().slideToggle(100);
			});



			//- Setup demo sections
			var sections = $('.sect');
			sections.wrap('<div class="sect-container"></div>');
			sections.each(function(i, section){
				$(section).parent().prepend('<div class="sect-title">'+$(section).data('title')+'<div>');
			});

			$('.sect-title').click(function(){
				$(this).next().slideToggle(100);
				$(this).toggleClass('selected');
			});

			$('.sect').toggle(false);
